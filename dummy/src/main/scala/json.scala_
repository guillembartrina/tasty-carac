class Writer:
  var inner: String = ""
  def writeFix(num: Int, value: String): Unit = ()
  def writeVar(del: String, value: String): Unit = ()

  override def toString() = inner

class Reader(input: String):
  def readFix(num: Int): String = ""
  def readVar(del: String): String = ""


import java.io.*

abstract class JsonValue

final class JsonNull extends JsonValue

final class JsonBoolean(val value: Boolean) extends JsonValue

final class JsonNumber(val value: Double) extends JsonValue

final class JsonString(val value: String) extends JsonValue

final class JsonArray(val value: List[JsonValue]) extends JsonValue

final class JsonObject(val value: List[(String, JsonValue)]) extends JsonValue

// Null: ? ?
// Boolean: Boolean.toString String.toBoolean
// Double: Double.toString String.toDouble
// String: - -

def serializeJsonNull(ser: JsonNull): String =
  "null".toString()

def deserializeJsonNull(deser: String): JsonNull =
  new JsonNull()

def serializeJsonBoolean(ser: JsonBoolean): String =
  ser.value.toString()

def deserializeJsonBoolean(deser: String): JsonBoolean =
  new JsonBoolean(deser.toBoolean)

def serializeJsonNumber(ser: JsonNumber): String =
  ser.value.toString()

def deserializeJsonNumber(deser: String): JsonNumber =
  new JsonNumber(deser.toDouble)

def serializeJsonString(ser: JsonString): String =
  ser.value

def deserializeJsonString(deser: String): JsonString =
  new JsonString(deser)

/*
def serializeJsonArray(ser: JsonArray): String =
  val target: List[JsonValue] = ser.value
  var i: Int = 0
  val out: StringWriter = new StringWriter()
  out.append('[')
  while i < ser.value.size do
    if i > 0 then out.append(',')
    out.append(serializeJsonValue(ser.value(i)))
  out.append(']')
  out.toString()

def deserializeJsonArray(deser: String): JsonArray =
  val in: StringReader = new StringReader(deser)
  var target: List[JsonValue] = Nil
  in.skip(1)
  while in.
  
def serializeJsonString(ser: JsonString): String =
  ser.value

def deserializeJsonString(deser: String): JsonString =
  new JsonString(deser.toString())

def serializeJsonValue(ser: JsonValue): String = ""

def deserializeJsonValue(deser: String): JsonValue = ""
*/



